#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Funciones auxiliares...

int* nueva_cerradura(int K[], int t) {
    int fil = K[0];
    int col = K[1];

    // Instanciación de cerradura
    int n = t - 1;                        // Tamaño de la cerradura
    int* X = new int[n];

    // Se define el tamaño de la primera matriz
    if (fil < 3 && col < 3)
        X[0] = 3;
    else if (fil > col) {
        if (fil % 2 == 0)
            X[0] = fil + 1;
        else
            X[0] = fil;
    }
    else {
        if (col % 2 == 0)
            X[0] = col + 1;
        else
            X[0] = col;
    }

    // Conversión a coordenadas cartesianas
    int x = col - int(X[0] / 2) - 1;
    int y = int(X[0] / 2) - fil + 1;

    int cc[] = { x, y };  // Casillas que se compararán

    // Construcción de cerradura
    int*** cer = new int**[n];

    cer[0] = matriz(X[0]);

    // Comparamos pares de matrices para validar las relaciones de la regla
    int j, u;
    bool cumple;

    for (int i = 0; i < n - 1; i++) {
        int m = 2;                  // Número de matrices que se comparan
        int*** cb = new int**[m];
        cb[0] = cer[i];
        cb[1] = matriz(X[0]);

        int tb[] = { X[i], X[0] };

        int* v = valores(cc, cb, m, tb);

        j = 0;
        u = 0;
        cumple = false;

        while (!cumple) {
            if (j == 1)
                cb[1] = rot_mat(cb[1], 1);
            if (j == 2)
                cb[1] = rot_mat(cb[1], 1);
            if (j == 3)
                cb[1] = rot_mat(cb[1], 1);

            int r = K[i + 2];                             // Relación a validar
            cumple = validar_relacion(cc, r, cb, m, tb);

            if (!cumple)
                j++;

            if (j > 3) {
                tb[1] = tb[1] + 2;
                cb[1] = matriz(tb[1]);

                j = 0;
                u++;
            }

            // Modificación para detectar cuando no es posible generar una configuración
            if (u == 2 && r == 1) {
                cout << "No es posible hacer la configuración para la regla K dada." << endl;
                return nullptr;
            }
        }

        cer[i + 1] = cb[1];
        X[i + 1] = tb[1];
    }

    return X;
}

int main() {
    // Ejemplo de uso
    vector<int> dimensions = {3, 5, 3, 5};
    vector<int> rule = {1, 1, 0, 1, 1, 2, 1, 1, 1, -1, 3, 2, 1, 1};
    int* configuration = nueva_cerradura(rule.data(), rule.size());

    if (configuration) {
        cout << "Cerradura X(";
        for (int i = 0; i < dimensions.size(); i++) {
            cout << dimensions[i];
            if (i < dimensions.size() - 1) {
                cout << ", ";
            }
        }
        cout << ")" << endl;

        for (int i = 0; i < dimensions.size(); i++) {
            cout << "Rotación estructura " << i + 1 << ": " << configuration[i] << endl;
        }

        delete[] configuration;
    }

    return 0;
}


vector<int> dimensions = {3, 5, 3, 5};
vector<int> rule = {1, 1, 0, 1, 1, 2, 1, 1, 1, -1, 3, 2, 1, 1};
int* configuration = nueva_cerradura(rule.data(), rule.size());

if (configuration) {
    // Imprimir la configuración
} else {
    cout << "No se pudo generar una configuración válida." << endl;
}
