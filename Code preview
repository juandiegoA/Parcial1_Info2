#include <iostream>
#include <vector>
using namespace std;

class MatrizM {
private:
    vector<vector<int>> matriz;
    int tamano; // Debe ser impar.

public:
    MatrizM(int n) : tamano(n) {
        matriz.resize(n, vector<int>(n, 0));
    }

    void rellenarMatriz() {
        int valor = 1;
        for (int i = 0; i < tamano; ++i) {
            for (int j = 0; j < tamano; ++j) {
                matriz[i][j] = valor++;
            }
        }
    }

    void mostrar() const {
        for (const auto& fila : matriz) {
            for (int valor : fila) {
                cout << valor << " ";
            }
            cout << "\n";
        }
    }

    int valorCentral() const {
        return matriz[tamano / 2][tamano / 2];
    }
};

bool reglaK(const vector<MatrizM>& estructuras, int valorReferencia) {
    int sumaCentrales = 0;
    for (const auto& estructura : estructuras) {
        sumaCentrales += estructura.valorCentral();
    }
    return sumaCentrales > valorReferencia;
}

int main() {
    int numEstructuras, tamano, valorReferencia;
    cout << "Ingrese el número de estructuras M para la cerradura X: ";
    cin >> numEstructuras;

    vector<MatrizM> cerraduraX;
    for (int i = 0; i < numEstructuras; ++i) {
        cout << "Ingrese el tamaño impar para la estructura M #" << (i + 1) << ": ";
        cin >> tamano;

        // Verificar si el tamaño es impar.
        if (tamano % 2 == 0) {
            cout << "El tamaño debe ser impar. Intente de nuevo.\n";
            --i; // Solicitar nuevamente el tamaño.
            continue;
        }

        MatrizM matriz(tamano);
        matriz.rellenarMatriz();
        cerraduraX.push_back(matriz);
    }

    // Mostrar las matrices.
    for (size_t i = 0; i < cerraduraX.size(); ++i) {
        cout << "\nMatriz " << (i + 1) << ":" << endl;
        cerraduraX[i].mostrar();
    }

    cout << "\nIngrese el valor de referencia para la regla K: ";
    cin >> valorReferencia;

    if (reglaK(cerraduraX, valorReferencia)) {
        cout << "\nLa cerradura se puede abrir." << endl;
    } else {
        cout << "\nLa cerradura permanece cerrada." << endl;
    }

    return 0;
}
